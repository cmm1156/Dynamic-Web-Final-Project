{"version":3,"sources":["containers/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Home","useState","hikingAPIData","setHikingAPIData","useEffect","axios","get","then","response","data","catch","error","console","log","map","item","i","name","role","dog","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAwDeA,MAnDf,WAAiB,IAAD,EAC4BC,mBAAS,IADrC,mBACPC,EADO,KACQC,EADR,KAqCd,OAhCAC,qBAAU,WACRC,IACGC,IADH,yBAOGC,MAAK,SAAUC,GACVA,EAASC,MACXN,EAAiBK,EAASC,SAG7BC,OAAM,SAAUC,GACfC,QAAQC,IAAI,QAASF,QAExB,IAiBD,gCACE,oCACCT,EAAcY,KAAI,SAACC,EAAMC,GAAP,OACjB,gCACE,uCAAUD,EAAKE,QACf,uCAAUF,EAAKG,QACf,sCAASH,EAAKI,SAHNH,UCjCHI,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ccde5e84.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n// axios is used to query (get/retrieve/fetch) data from an API\r\n\r\nfunction Home() {\r\n  const [hikingAPIData, setHikingAPIData] = useState([]);\r\n\r\n  // NOTE: localhost:4000 or server equivalent must be running (npm start) in order to retrive the data\r\n  // Later this will be changed to Heroku deploy address\r\n  useEffect(() => {\r\n    axios\r\n      .get(`http://localhost:4000`) // in Excerise-Two, this line contained .get(`https://openweather.com/data/? ...`),\r\n      /*instead of this the openweather API url, we are using our localhost:4000 ( the backend )\r\n      We are using our backend as an API\r\n      How this works:\r\n       - Express serves our data to our localhost:4000\r\n       - We use axios to retrieve that data from our server (localhost:4000) that we just served to our server (localhost:4000) */\r\n      .then(function (response) {\r\n        if (response.data) {\r\n          setHikingAPIData(response.data);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(\"error\", error);\r\n      });\r\n  }, []);\r\n\r\n  // console.log({ hikingAPIData });\r\n\r\n  // const hikingKey = process.env.REACT_APP_HIKING_APIKEY;\r\n  // axios\r\n  //   .get(\r\n  //     `https://www.hikingproject.com/data/get-trails?lat=40.0274&lon=-105.2519&maxDistance=10&key=${hikingKey}`\r\n  //   )\r\n  //   .then(function (response) {\r\n  //     console.log(response.data);\r\n  //   })\r\n  //   .catch(function (error) {\r\n  //     console.log(\"error\", error);\r\n  //   });\r\n\r\n  return (\r\n    <div>\r\n      <h1>Hi</h1>\r\n      {hikingAPIData.map((item, i) => (\r\n        <div key={i}>\r\n          <p>Name: {item.name}</p>\r\n          <p>Role: {item.role}</p>\r\n          <p>Dog: {item.dog}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import \"./App.css\";\nimport Home from \"./containers/Home\";\n\n//  THIS COMBINES EXERCISES ONE, TWO, THREE, AND FOUR\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}